#include <bitset>
#include "MaskTest.h"
#include "..\Algorithm\String.h"

void MaskTest::Init(void)
{
	Add("1-bit", [&]() {
		My::Mask m(1);
		bitset<1> b;
		m.Set(0);
		cout << m << endl;
		b.set(0);
		ASSERT2(m.Test(0), "Bit 0 != 1");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));
		m.Reset(0);
		cout << m << endl;
		b.reset(0);
		ASSERT2(!m.Test(0), "Bit 0 != 0");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
		m.Set();
		cout << m << endl;
		b.set();
		ASSERT2(m.Test(0), "Bit 0 != 1");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));
		m.Reset();
		cout << m << endl;
		b.reset();
		ASSERT2(!m.Test(0), "Bit 0 != 0");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
		m.Flip();
		cout << m << endl;
		b.flip();
		ASSERT2(m.Test(0), "Bit 0 != 1");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));
		m.Flip(0);
		cout << m << endl;
		b.flip(0);
		ASSERT2(!m.Test(0), "Bit 0 != 0");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
	});

	Add("32-bit", [&]() {
		My::Mask m(32);
		bitset<32> b;
		m.Set(0);
		cout << m << endl;
		b.set(0);
		ASSERT2(m.Test(0), "Bit 0 != 1");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));
		m.Set(11);
		cout << m << endl;
		b.set(11);
		ASSERT2(m.Test(11), "Bit 11 != 1");
		ASSERT1(m.Test(11) == b.test(11));
		ASSERT2(m.Count() == 2, My::String::Format("Count = [%d]", m.Count()));
		m.Flip(11);
		cout << m << endl;
		b.flip(11);
		ASSERT2(!m.Test(11), "Bit 11 != 0");
		ASSERT1(m.Test(11) == b.test(11));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));		
		m.Set(23);
		cout << m << endl;
		b.set(23);
		ASSERT2(m.Test(23), "Bit 23 != 1");
		ASSERT1(m.Test(23) == b.test(23));		
		ASSERT2(m.Count() == 2, My::String::Format("Count = [%d]", m.Count()));
		m.Set(31);
		cout << m << endl;
		b.set(31);
		ASSERT2(m.Test(31), "Bit 31 != 1");
		ASSERT1(m.Test(31) == b.test(31));
		ASSERT2(m.Count() == 3, My::String::Format("Count = [%d]", m.Count()));
		m.Flip(31);
		cout << m << endl;
		b.flip(31);
		ASSERT2(!m.Test(31), "Bit 31 != 0");
		ASSERT1(m.Test(31) == b.test(31));
		ASSERT2(m.Count() == 2, My::String::Format("Count = [%d]", m.Count()));
		m.Flip(31);
		cout << m << endl;
		b.flip(31);
		ASSERT2(m.Test(31), "Bit 31 != 1");
		ASSERT1(m.Test(31) == b.test(31));
		ASSERT2(m.Count() == 3, My::String::Format("Count = [%d]", m.Count()));
		m.Reset();
		cout << m << endl;
		b.reset();
		ASSERT2(!m.Any(), "Mask is set");
		ASSERT1(m.Any() == b.any());
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
		m.Set();
		cout << m << endl;
		b.set();
		ASSERT2(m.All(), "Mask is not set");
		ASSERT1(m.All() == b.all());
		ASSERT2(m.Count() == 32, My::String::Format("Count = [%d]", m.Count()));
		m.Flip();
		cout << m << endl;
		b.flip();
		ASSERT2(!m.All(), "Mask is not set");
		ASSERT1(m.All() == b.all());
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
	});

	Add("40-bit", [&]() {
		My::Mask m(40);
		bitset<40> b;
		m.Set(0);
		cout << m << endl;
		b.set(0);
		ASSERT2(m.Test(0), "Bit 0 != 1");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));
		m.Set(11);
		cout << m << endl;
		b.set(11);
		ASSERT2(m.Test(11), "Bit 11 != 1");
		ASSERT1(m.Test(11) == b.test(11));
		ASSERT2(m.Count() == 2, My::String::Format("Count = [%d]", m.Count()));m.Set(23);
		cout << m << endl;
		b.set(23);
		ASSERT2(m.Test(23), "Bit 23 != 1");
		ASSERT1(m.Test(23) == b.test(23));		
		ASSERT2(m.Count() == 3, My::String::Format("Count = [%d]", m.Count()));
		m.Set(31);
		cout << m << endl;
		b.set(31);
		ASSERT2(m.Test(31), "Bit 31 != 1");
		ASSERT1(m.Test(31) == b.test(31));
		ASSERT2(m.Count() == 4, My::String::Format("Count = [%d]", m.Count()));
		m.Set(32);
		cout << m << endl;
		b.set(32);
		ASSERT2(m.Test(32), "Bit 32 != 1");
		ASSERT1(m.Test(32) == b.test(32));
		ASSERT2(m.Count() == 5, My::String::Format("Count = [%d]", m.Count()));
		m.Set(39);
		cout << m << endl;
		b.set(39);
		ASSERT2(m.Test(39), "Bit 39 != 1");
		ASSERT1(m.Test(39) == b.test(39));
		ASSERT2(m.Count() == 6, My::String::Format("Count = [%d]", m.Count()));
		m.Flip(39);
		cout << m << endl;
		b.flip(39);
		ASSERT2(!m.Test(39), "Bit 39 != 0");
		ASSERT1(m.Test(39) == b.test(39));
		ASSERT2(m.Count() == 5, My::String::Format("Count = [%d]", m.Count()));
		m.Flip();
		cout << m << endl;
		b.flip();
		ASSERT2(m.Test(39), "Bit 39 != 1");
		ASSERT1(m.Test(39) == b.test(39));
		ASSERT2(m.Count() == 35, My::String::Format("Count = [%d]", m.Count()));
		m.Reset();
		cout << m << endl;
		b.reset();
		ASSERT2(!m.Any(), "Mask is set");
		ASSERT1(m.Any() == b.any());
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
		m.Set();
		cout << m << endl;
		b.set();
		ASSERT2(m.All(), "Mask is not set");
		ASSERT1(m.All() == b.all());
		ASSERT2(m.Count() == 40, My::String::Format("Count = [%d]", m.Count()));
	});

	Add("41-bit", [&]() {
		My::Mask m(41);
		bitset<41> b;
		m.Set(0);
		cout << m << endl;
		b.set(0);
		ASSERT2(m.Test(0), "Bit 0 != 1");
		ASSERT1(m.Test(0) == b.test(0));
		ASSERT2(m.Count() == 1, My::String::Format("Count = [%d]", m.Count()));
		m.Set(11);
		cout << m << endl;
		b.set(11);
		ASSERT2(m.Test(11), "Bit 11 != 1");
		ASSERT1(m.Test(11) == b.test(11));
		ASSERT2(m.Count() == 2, My::String::Format("Count = [%d]", m.Count()));
		m.Set(23);
		cout << m << endl;
		b.set(23);
		ASSERT2(m.Test(23), "Bit 23 != 1");
		ASSERT1(m.Test(23) == b.test(23));		
		ASSERT2(m.Count() == 3, My::String::Format("Count = [%d]", m.Count()));
		m.Set(31);
		cout << m << endl;
		b.set(31);
		ASSERT2(m.Test(31), "Bit 31 != 1");
		ASSERT1(m.Test(31) == b.test(31));
		ASSERT2(m.Count() == 4, My::String::Format("Count = [%d]", m.Count()));
		m.Set(32);
		cout << m << endl;
		b.set(32);
		ASSERT2(m.Test(32), "Bit 32 != 1");
		ASSERT1(m.Test(32) == b.test(32));
		ASSERT2(m.Count() == 5, My::String::Format("Count = [%d]", m.Count()));
		m.Set(39);
		cout << m << endl;
		b.set(39);
		ASSERT2(m.Test(39), "Bit 39 != 1");
		ASSERT1(m.Test(39) == b.test(39));
		ASSERT2(m.Count() == 6, My::String::Format("Count = [%d]", m.Count()));
		m.Set(40);
		cout << m << endl;
		b.set(40);
		ASSERT2(m.Test(40), "Bit 40 != 1");
		ASSERT1(m.Test(40) == b.test(40));
		ASSERT2(m.Count() == 7, My::String::Format("Count = [%d]", m.Count()));
		m.Reset();
		cout << m << endl;
		b.reset();
		ASSERT2(!m.Any(), "Mask is set");
		ASSERT1(m.Any() == b.any());
		ASSERT2(m.Count() == 0, My::String::Format("Count = [%d]", m.Count()));
		m.Set();
		cout << m << endl;
		b.set();
		ASSERT2(m.All(), "Mask is not set");
		ASSERT1(m.All() == b.all());
		ASSERT2(m.Count() == 41, My::String::Format("Count = [%d]", m.Count()));
	});
}
