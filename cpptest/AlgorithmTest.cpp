#include "Test.h"

void AlgorithmTest::Init(void)
{
    Add("BinarySearch", [&](){
        {
            for (int n = 1; n < 10; n++) {
                vector<int> input(n, n);
                int i = Algorithm::Search::BinarySearch(input, n, 0, input.size() - 1);
                Logger() << input;
                Logger() << " Found " << n << " at " << i << endl;
                ASSERT1(n == input[i]);
                ASSERT1(i == 0);
            }
        }
        {
            for (int n = 1; n < 10; n++) {
                vector<int> input(n, n);
                int i = Algorithm::Search::BinarySearch(input, n, 0, input.size() - 1, false);
                Logger() << input;
                Logger() << " Found " << n << " at " << i << endl;
                ASSERT1(n == input[i]);
                ASSERT1(i == input.size() - 1);
            }
        }
        {
            int max = 50;
            for (int i = 0; i < 100; i++) {
                vector<int> input = Util::RandomVector(Util::RandomInt(1000, 1), max);
                sort(input.begin(), input.end());
                Logger() << input;
                for (int j = 0; j < 100; j++) {
                    int e = Util::RandomInt(max);
                    int i = Algorithm::Search::BinarySearch(input, e, 0, input.size() - 1);
                    auto it = find(input.begin(), input.end(), e);
                    if (i == -1)
                    {
                        Logger() << "Not found " << e << endl;
                        ASSERT1(it == input.end());
                    }
                    else
                    {
                        int i2 = (int)(it - input.begin());
                        Logger() << "Found " << e << " at (" << i << ", " << i2 << ")" << endl;
                        ASSERT1(e == input[i]);
                        ASSERT1(i == i2);
                    }
                }
            }
        }
        {
            int max = 50;
            for (int i = 0; i < 100; i++) {
                vector<int> input = Util::RandomVector(Util::RandomInt(1000, 1), max);
                sort(input.begin(), input.end());
                Logger() << input;
                for (int j = 0; j < 100; j++) {
                    int e = Util::RandomInt(max);
                    int i = Algorithm::Search::BinarySearch(input, e, 0, input.size() - 1, false);
                    auto it = find(input.begin(), input.end(), e);
                    if (i == -1)
                    {
                        Logger() << "Not found " << e << endl;
                        ASSERT1(it == input.end());
                    }
                    else
                    {
                        int i2 = (int)(it - input.begin());
                        Logger() << "Found " << e << " at (" << i << ", " << i2 << ")" << endl;
                        ASSERT1(e == input[i]);
                        ASSERT1(e == input[i2]);
                        ASSERT1(i >= i2);
                        for (size_t k = i + 1; k < input.size(); k++)
                        {
                            ASSERT1(e != input[k]);
                        }
                    }
                }
            }
        }
    });

    Add("FindInsertPoint", [&](){
        {
            for (int n = 1; n < 10; n++) {
                vector<int> input(n, n);
                size_t i = Algorithm::Search::FindInsertPoint(input, n, 0, input.size() - 1);
                Logger() << input;
                Logger() << n << " should be inserted at " << i << endl;
                ASSERT1(i == 0);
            }
        }
        {
            for (int n = 1; n < 10; n++) {
                vector<int> input(n, n);
                size_t i = Algorithm::Search::FindInsertPoint(input, n - 1, 0, input.size() - 1);
                Logger() << input;
                Logger() << n - 1 << " should be inserted at " << i << endl;
                ASSERT1(i == 0);
            }
        }
        {
            for (int n = 1; n < 10; n++) {
                vector<int> input(n, n);
                size_t i = Algorithm::Search::FindInsertPoint(input, n, 0, input.size() - 1, false);
                Logger() << input;
                Logger() << n << " should be inserted at " << i << endl;
                ASSERT1(i == input.size() - 1);
            }
        }
        {
            for (int n = 1; n < 10; n++) {
                vector<int> input(n, n);
                size_t i = Algorithm::Search::FindInsertPoint(input, n + 1, 0, input.size() - 1, false);
                Logger() << input;
                Logger() << n + 1 << " should be inserted at " << i << endl;
                ASSERT1(i == input.size());
            }
        }
        {
            int max = 50;
            for (int i = 0; i < 100; i++) {
                vector<int> input = Util::RandomVector(Util::RandomInt(1000, 1), max);
                sort(input.begin(), input.end());
                Logger() << input;
                for (int j = 0; j < 100; j++) {
                    int e = Util::RandomInt(max + 10, -10);
                    size_t i = Algorithm::Search::FindInsertPoint(input, e, 0, input.size() - 1);
                    Logger() << e << " should be inserted at " << i << endl;
                    ASSERT1(i >= 0);
                    ASSERT1(i <= input.size());
                    if (i < input.size()) ASSERT1(e <= input[i]);
                    if (i > 0) ASSERT1(input[i - 1] < e);
                }
            }
        }
        {
            int max = 50;
            for (int i = 0; i < 100; i++) {
                vector<int> input = Util::RandomVector(Util::RandomInt(1000, 1), max);
                sort(input.begin(), input.end());
                Logger() << input;
                for (int j = 0; j < 100; j++) {
                    int e = Util::RandomInt(max + 10, -10);
                    size_t i = Algorithm::Search::FindInsertPoint(input, e, 0, input.size() - 1, false);
                    Logger() << e << " should be inserted at " << i << endl;
                    ASSERT1(i >= 0);
                    ASSERT1(i <= input.size());
                    if (i < input.size()) ASSERT1(e <= input[i]);
                    if (i < input.size() - 1) ASSERT1(e < input[i + 1]);
                }
            }
        }
    });

    Add("FindShiftPoint", [&]() {
        auto check = [&](const vector<int> v, size_t d) {
            Logger() << v;
            size_t s = Algorithm::Search::FindShiftPoint(v);
            Logger() << "shifted by " << d << ", " << s << endl;
            ASSERT1(s == d);
        };
        {
            vector<int> v = { 0 };
            check(v, 0);
        }
        {
            vector<int> v = { 1, 2 };
            check(v, 0);
        }
        {
            vector<int> v = { 2, 1 };
            check(v, 1);
        }
        {
            vector<int> v = { 3, 4, 5 };
            check(v, 0);
        }
        {
            vector<int> v = { 5, 3, 4 };
            check(v, 1);
        }
        {
            vector<int> v = { 4, 5, 3 };
            check(v, 2);
        }
        {
            for (int i = 0; i < 100; i++) {
                size_t n = Util::RandomInt(100, 1);
                size_t s = Util::RandomInt(100) % n;
                vector<int> input = Util::SortedArrayWithShift(n, s);
                check(input, s);
            }
        }
    });

    Add("Partition", [&]() {
        {
            int max = 50;
            for (int i = 0; i < 100; i++) {
                vector<int> input = Util::RandomVector(Util::RandomInt(200, 1), max);
                Logger() << input;
                for (int j = 0; j < 100; j++) {
                    int e = Util::RandomInt(max + 10, -10);
                    size_t i = Algorithm::Partition::PartitionByValue(input, e, 0, input.size() - 1);
                    Logger() << e << " partion at " << i << endl;
                    ASSERT1(i >= 0);
                    ASSERT1(i <= input.size());
                    for (size_t k = 0; k < i; k++)
                    {
                        ASSERT1(input[k] < e);
                    }
                    for (size_t k = i; k < input.size(); k++)
                    {
                        ASSERT1(input[k] >= e);
                    }
                }
            }
        }
        {
            int max = 50;
            for (int i = 0; i < 100; i++) {
                vector<int> input = Util::RandomVector(Util::RandomInt(200, 1), max);
                Logger() << input;
                for (int j = 0; j < 100; j++) {
                    int e = Util::RandomInt(max + 10, -10);
                    size_t i = Algorithm::Partition::PartitionByValue(input, e, 0, input.size() - 1, std::greater<>());
                    Logger() << e << " partion at " << i << endl;
                    ASSERT1(i >= 0);
                    ASSERT1(i <= input.size());
                    for (size_t k = 0; k < i; k++)
                    {
                        ASSERT1(input[k] > e);
                    }
                    for (size_t k = i; k < input.size(); k++)
                    {
                        ASSERT1(input[k] <= e);
                    }
                }
            }
        }
    });

    Add("YoungTableau.Push", [&](){
        {
            vector<vector<int>> m = 
            {
                {10, 9, 5, 4},
                {8, 6, 3, -2},
                {7, 2, -1, -3},
                {1, 0, -4, 20}
            };

            Logger() << m;
            Algorithm::YoungTableau<>::PushUp(m, 3, 3);
            Logger() << m;
            ASSERT1(m[0][0] == 20);
        }
        {
            vector<vector<int>> m =
            {
                { 0, 1, 5, 6 },
                { 2, 4, 7, 12 },
                { 3, 8, 11, 13 },
                { 9, 10, 14, -10 }
            };

            Logger() << m;
            Algorithm::YoungTableau<greater<>>::PushUp(m, 3, 3);
            Logger() << m;
            ASSERT1(m[0][0] == -10);
        }
        {
            vector<vector<int>> m =
            {
                { -10, 9, 5, 4 },
                { 8, 6, 3, -2 },
                { 7, 2, -1, -3 },
                { 1, 0, -4, -5 }
            };

            Logger() << m;
            Algorithm::YoungTableau<>::PushDown(m, 0, 0);
            Logger() << m;
            ASSERT1(m[0][0] == 9);
            ASSERT1(m[3][3] == -10);
        }
        {
            vector<vector<int>> m =
            {
                { 20, 1, 5, 6 },
                { 2, 4, 7, 12 },
                { 3, 8, 11, 13 },
                { 9, 10, 14, 15 }
            };

            Logger() << m;
            Algorithm::YoungTableau<greater<>>::PushDown(m, 0, 0);
            Logger() << m;
            ASSERT1(m[0][0] == 1);
            ASSERT1(m[3][3] == 20);
        }
    });

    Add("YoungTableau.Create", [&]() {
        {
            vector<vector<int>> m = Util::RandomMatrix(4, 5);
            Logger() << m;
            Algorithm::YoungTableau<>::Create(m);
            Logger() << m;
            Algorithm::YoungTableau<>::Verify(m);
        }
        {
            vector<vector<int>> m = Util::RandomMatrix(5, 4);
            Logger() << m;
            Algorithm::YoungTableau<greater<>>::Create(m);
            Logger() << m;
            Algorithm::YoungTableau<greater<>>::Verify(m);
        }
        {
            vector<vector<int>> m = Util::RandomMatrix(4, 5);
            Logger() << m;
            Algorithm::YoungTableau<>::Create2(m);
            Logger() << m;
            Algorithm::YoungTableau<>::Verify(m);
        }
        {
            vector<vector<int>> m = Util::RandomMatrix(5, 4);
            Logger() << m;
            Algorithm::YoungTableau<greater<>>::Create2(m);
            Logger() << m;
            Algorithm::YoungTableau<greater<>>::Verify(m);
        }
        {
            for (int i = 0; i < 100; i++)
            {
                size_t m = Util::RandomInt(100, 1);
                size_t n = Util::RandomInt(100, 1);
                vector<vector<int>> matrix = Util::RandomMatrix(m, n, 100);
                Logger() << matrix;
                Algorithm::YoungTableau<>::Create2(matrix);
                Logger() << matrix;
                Algorithm::YoungTableau<>::Verify(matrix);
            }
        }
        {
            for (int i = 0; i < 100; i++)
            {
                size_t m = Util::RandomInt(100, 1);
                size_t n = Util::RandomInt(100, 1);
                vector<vector<int>> matrix = Util::RandomMatrix(m, n, 100);
                Logger() << matrix;
                Algorithm::YoungTableau<greater<>>::Create2(matrix);
                Logger() << matrix;
                Algorithm::YoungTableau<greater<>>::Verify(matrix);
            }
        }
    });

    Add("YoungTableau.Search1", [&]() {
        {
            vector<vector<int>> matrix =
            {
                {100, 98, 97, 96, 95, 95, 84, 81, 74, 72, 68, 65, 62, 61, 55, 54, 51, 43, 36, 35, 32, 29, 24, 22 },
                {100, 97, 97, 96, 94, 90, 83, 79, 73, 69, 66, 64, 58, 56, 55, 49, 46, 40, 36, 34, 32, 28, 22, 18},
                {100, 97, 96, 94, 92, 87, 83, 78, 72, 68, 65, 62, 58, 54, 50, 48, 46, 40, 35, 33, 31, 28, 20, 9},
                {100, 97, 95, 94, 88, 86, 83, 77, 72, 67, 63, 61, 57, 52, 47, 47, 42, 39, 35, 33, 30, 28, 17, 8},
                {100, 97, 95, 91, 87, 84, 83, 76, 72, 67, 61, 60, 57, 52, 46, 45, 42, 37, 33, 31, 26, 20, 15, 7},
                {100, 96, 95, 90, 86, 84, 81, 76, 71, 67, 60, 57, 54, 51, 46, 42, 40, 37, 32, 30, 24, 20, 15, 6},
                {99, 96, 93, 90, 86, 83, 80, 76, 69, 66, 60, 57, 53, 51, 46, 42, 38, 37, 31, 29, 23, 17, 14, 6},
                {99, 96, 93, 90, 85, 83, 80, 74, 69, 64, 60, 56, 51, 50, 45, 40, 38, 33, 31, 27, 22, 15, 11, 6},
                {99, 96, 93, 89, 84, 82, 78, 73, 69, 64, 59, 55, 51, 49, 44, 40, 37, 32, 30, 26, 22, 15, 11, 5},
                {99, 96, 92, 89, 84, 82, 77, 73, 68, 63, 59, 54, 49, 48, 44, 39, 36, 32, 28, 25, 21, 14, 9, 5},
                {99, 95, 92, 88, 84, 81, 75, 72, 68, 63, 58, 54, 49, 46, 42, 38, 36, 30, 28, 24, 19, 13, 8, 5},
                {98, 95, 91, 88, 83, 80, 75, 70, 67, 63, 57, 53, 48, 46, 40, 37, 33, 30, 24, 23, 18, 12, 7, 3},
                {98, 94, 91, 87, 83, 79, 75, 70, 66, 62, 57, 53, 47, 46, 39, 37, 33, 29, 23, 23, 17, 12, 7, 3},
                {98, 94, 90, 87, 83, 78, 73, 70, 65, 61, 57, 53, 47, 44, 39, 36, 33, 29, 23, 22, 17, 12, 7, 3},
                {97, 94, 89, 86, 82, 75, 72, 69, 63, 61, 55, 51, 46, 44, 38, 36, 32, 28, 23, 22, 16, 12, 6, 2},
                {97, 94, 89, 86, 80, 74, 71, 69, 63, 60, 54, 50, 46, 41, 38, 36, 32, 28, 23, 22, 14, 11, 6, 2},
                {97, 93, 89, 86, 80, 74, 71, 67, 62, 60, 53, 49, 44, 41, 37, 34, 31, 27, 23, 21, 14, 11, 6, 2},
                {97, 93, 88, 86, 79, 74, 71, 67, 62, 58, 53, 49, 44, 40, 36, 34, 30, 27, 22, 20, 13, 10, 5, 2},
                {97, 92, 87, 84, 79, 73, 68, 67, 62, 57, 52, 48, 43, 40, 36, 33, 29, 25, 21, 17, 13, 9, 5, 2},
                {96, 91, 87, 84, 79, 72, 68, 63, 62, 57, 52, 47, 43, 40, 36, 32, 28, 25, 20, 17, 13, 9, 5, 1},
                {96, 90, 86, 84, 79, 71, 67, 63, 59, 55, 51, 47, 42, 40, 35, 31, 28, 25, 19, 15, 12, 9, 5, 1},
                {96, 90, 86, 83, 78, 71, 67, 63, 58, 54, 51, 45, 42, 39, 34, 30, 27, 23, 18, 15, 12, 8, 5, 1},
                {96, 90, 85, 82, 76, 70, 67, 62, 58, 53, 51, 45, 41, 39, 34, 30, 26, 20, 18, 14, 12, 8, 4, 1},
                {95, 90, 84, 80, 76, 70, 65, 62, 57, 52, 49, 45, 41, 38, 33, 27, 25, 19, 16, 13, 11, 8, 4, 1},
                {94, 89, 83, 80, 75, 68, 65, 62, 56, 52, 47, 44, 41, 38, 33, 27, 25, 19, 16, 12, 10, 7, 3, 1},
                {94, 89, 83, 78, 73, 67, 64, 60, 56, 50, 47, 44, 41, 37, 33, 27, 24, 19, 15, 12, 10, 7, 2, 0},
                {92, 88, 82, 77, 72, 66, 63, 60, 55, 50, 45, 43, 39, 36, 31, 26, 21, 19, 14, 11, 9, 6, 2, 0},
                {89, 87, 80, 77, 69, 66, 58, 58, 55, 49, 45, 43, 38, 33, 29, 23, 20, 19, 14, 11, 9, 5, 2, 0},
                {89, 87, 79, 76, 67, 61, 56, 56, 54, 48, 43, 39, 38, 24, 23, 21, 20, 18, 12, 11, 7, 3, 1, 0},
                {86, 79, 78, 74, 58, 58, 54, 50, 48, 46, 34, 30, 24, 24, 22, 20, 19, 18, 9, 7, 7, 2, 1, 0}
            };

            Logger() << matrix;
            int value = 88;
            auto p = Algorithm::YoungTableau<>::Search2(matrix, value);
            Logger() << value << " is at (" << p.first << ", " << p.second << ")" << endl;
            ASSERT1(matrix[p.first][p.second] == value);
        }
    });

    Add("YoungTableau.Search2", [&]() {
        {
            for (int i = 0; i < 100; i++)
            {
                size_t m = Util::RandomInt(50, 1);
                size_t n = Util::RandomInt(50, 1);
                vector<vector<int>> matrix = Util::RandomMatrix(m, n, 100);
                Algorithm::YoungTableau<>::Create2(matrix);
                Logger() << matrix;
                Algorithm::YoungTableau<>::Verify(matrix);
                for (size_t j = 0; j < m; j++)
                {
                    for (size_t k = 0; k < matrix[j].size(); k++)
                    {
                        auto p0 = Algorithm::YoungTableau<>::Search(matrix, matrix[j][k]);
                        auto p2 = Algorithm::YoungTableau<>::Search2(matrix, matrix[j][k]);
                        Logger() << matrix[j][k] << " is at (" << p0.first << ", " << p0.second << "), (" << p2.first << ", " << p2.second << ")" << endl;
                        ASSERT1(matrix[p0.first][p0.second] == matrix[p2.first][p2.second]);
                    }
                }
            }
        }
        {
            for (int i = 0; i < 100; i++)
            {
                size_t m = Util::RandomInt(50, 1);
                size_t n = Util::RandomInt(50, 1);
                vector<vector<int>> matrix = Util::RandomMatrix(m, n, 100);
                Algorithm::YoungTableau<greater<>>::Create2(matrix);
                Logger() << matrix;
                Algorithm::YoungTableau<greater<>>::Verify(matrix);
                for (size_t j = 0; j < m; j++)
                {
                    for (size_t k = 0; k < matrix[j].size(); k++)
                    {
                        auto p0 = Algorithm::YoungTableau<greater<>>::Search(matrix, matrix[j][k]);
                        auto p2 = Algorithm::YoungTableau<greater<>>::Search2(matrix, matrix[j][k]);
                        Logger() << matrix[j][k] << " is at (" << p0.first << ", " << p0.second << "), (" << p2.first << ", " << p2.second << ")" << endl;
                        ASSERT1(matrix[p0.first][p0.second] == matrix[p2.first][p2.second]);
                    }
                }
            }
        }
    });

    Add("YoungTableau.CountHigherThan1", [&]() {
        {
            vector<vector<int>> matrix =
            {
                {100, 99, 97, 97, 92, 90, 80, 79, 74, 68, 65, 63, 61, 51, 49, 41, 41, 22 },
                {100, 98, 97, 94, 92, 83, 79, 79, 73, 67, 64, 63, 56, 48, 44, 38, 25, 18},
                {100, 98, 97, 93, 90, 82, 78, 77, 71, 66, 60, 59, 48, 46, 38, 34, 24, 11},
                {100, 98, 95, 93, 87, 81, 78, 72, 71, 66, 59, 51, 45, 44, 34, 31, 22, 9},
                {100, 98, 95, 92, 84, 81, 77, 71, 69, 62, 55, 51, 44, 38, 32, 26, 20, 8},
                {100, 97, 94, 91, 83, 80, 75, 70, 67, 59, 52, 51, 43, 33, 31, 24, 15, 8},
                {100, 97, 92, 91, 82, 80, 74, 69, 67, 59, 51, 48, 42, 32, 30, 24, 13, 7},
                {99, 97, 92, 87, 82, 78, 73, 69, 65, 57, 51, 45, 40, 32, 30, 24, 13, 6},
                {99, 96, 92, 87, 80, 74, 71, 68, 62, 54, 48, 45, 39, 32, 28, 21, 12, 5},
                {99, 96, 90, 85, 78, 74, 71, 67, 62, 53, 48, 44, 39, 32, 25, 19, 12, 5},
                {99, 95, 89, 84, 77, 73, 70, 65, 61, 53, 47, 44, 38, 32, 25, 19, 11, 4},
                {99, 94, 88, 83, 76, 72, 69, 64, 57, 51, 46, 43, 37, 31, 25, 18, 11, 4},
                {98, 94, 88, 82, 76, 72, 67, 63, 57, 51, 46, 42, 35, 28, 24, 17, 11, 4},
                {98, 94, 87, 80, 76, 71, 65, 61, 52, 49, 45, 41, 33, 28, 23, 17, 10, 4},
                {98, 94, 86, 80, 76, 71, 64, 58, 52, 49, 44, 37, 33, 26, 23, 15, 10, 4},
                {98, 94, 86, 80, 75, 70, 63, 57, 52, 48, 44, 35, 32, 25, 21, 15, 10, 4},
                {98, 93, 85, 79, 74, 67, 63, 56, 52, 47, 42, 35, 31, 24, 21, 14, 9, 3},
                {96, 93, 84, 79, 73, 66, 62, 56, 51, 47, 39, 35, 29, 24, 20, 14, 9, 3},
                {96, 92, 83, 77, 72, 66, 62, 55, 51, 47, 39, 34, 29, 24, 20, 13, 8, 3},
                {96, 90, 83, 77, 72, 66, 61, 53, 50, 46, 39, 34, 29, 24, 20, 12, 8, 3},
                {96, 90, 82, 77, 71, 65, 60, 53, 49, 45, 38, 33, 27, 23, 20, 12, 8, 3},
                {96, 90, 82, 76, 71, 65, 59, 52, 48, 42, 38, 33, 26, 22, 19, 12, 8, 3},
                {95, 90, 82, 76, 70, 65, 59, 52, 47, 41, 38, 33, 25, 22, 19, 11, 8, 2},
                {95, 89, 81, 76, 69, 64, 59, 52, 46, 40, 35, 32, 25, 22, 18, 11, 7, 2},
                {95, 89, 81, 74, 69, 63, 58, 49, 45, 40, 35, 32, 25, 22, 17, 11, 7, 2},
                {95, 89, 80, 74, 69, 63, 58, 49, 44, 40, 34, 31, 24, 21, 17, 10, 7, 1},
                {95, 88, 80, 74, 68, 61, 57, 48, 43, 39, 34, 30, 23, 21, 16, 10, 6, 1},
                {95, 87, 80, 73, 68, 61, 55, 47, 42, 39, 34, 30, 22, 21, 16, 9, 5, 1},
                {94, 86, 79, 73, 67, 61, 55, 47, 41, 38, 32, 28, 22, 21, 16, 9, 4, 1},
                {94, 86, 78, 72, 67, 60, 55, 47, 41, 36, 32, 25, 22, 21, 15, 9, 4, 1},
                {93, 85, 77, 71, 67, 60, 52, 46, 40, 36, 32, 24, 22, 20, 14, 9, 4, 1},
                {92, 83, 77, 71, 67, 60, 52, 45, 39, 36, 31, 23, 19, 19, 14, 8, 3, 1},
                {92, 83, 77, 71, 67, 59, 52, 43, 39, 35, 30, 22, 18, 18, 14, 8, 3, 1},
                {92, 82, 76, 71, 64, 59, 50, 42, 38, 34, 27, 22, 18, 16, 14, 8, 3, 0},
                {92, 82, 76, 71, 64, 53, 49, 42, 38, 33, 26, 21, 16, 15, 13, 7, 3, 0},
                {90, 82, 75, 71, 61, 53, 47, 41, 38, 32, 26, 21, 16, 14, 12, 6, 3, 0},
                {89, 81, 74, 70, 60, 53, 44, 41, 37, 32, 25, 21, 16, 13, 10, 6, 2, 0},
                {87, 81, 72, 69, 60, 52, 44, 41, 34, 28, 24, 20, 15, 13, 10, 5, 2, 0},
                {86, 80, 69, 68, 59, 49, 42, 40, 29, 26, 23, 20, 14, 13, 9, 4, 1, 0},
                {86, 79, 67, 65, 55, 43, 42, 33, 29, 26, 22, 19, 14, 13, 8, 4, 1, 0},
                {84, 76, 65, 51, 45, 42, 39, 33, 28, 26, 22, 17, 13, 12, 5, 4, 1, 0},
                {82, 72, 56, 50, 44, 35, 34, 31, 22, 18, 18, 17, 13, 6, 5, 3, 1, 0}
            };

            Logger() << matrix;

            int value = 100;
            unsigned int c = Algorithm::YoungTableau<>::CountHigherThan2(matrix, value);
            Logger() << c << " elements are higher than " << value << endl;
            ASSERT1(c == 0);
            value = 11;
            c = Algorithm::YoungTableau<>::CountHigherThan2(matrix, value);
            Logger() << c << " elements are higher than " << value << endl;
        }
    });
    
    Add("YoungTableau.CountHigherThan2", [&]() {
        {
            vector<vector<int>> matrix =
            {
                {100, 100, 100, 99, 96, 96, 94, 92, 90, 89, 87, 86, 84, 84, 80, 75, 73, 67, 65, 61, 57, 57, 54, 52, 49, 48, 46, 42, 41, 40, 38, 33, 25, 23, 20, 16, 14},
                {100, 100, 99, 98, 96, 95, 94, 92, 89, 87, 85, 84, 83, 79, 74, 74, 70, 66, 63, 61, 56, 55, 52, 50, 45, 43, 42, 39, 38, 35, 30, 29, 23, 23, 17, 14, 9},
                {100, 100, 99, 98, 96, 93, 91, 90, 88, 86, 84, 83, 81, 77, 74, 72, 68, 62, 62, 60, 55, 52, 50, 48, 45, 43, 40, 39, 37, 32, 28, 23, 23, 19, 17, 13, 7},
                {100, 99, 98, 97, 94, 93, 91, 90, 87, 82, 82, 81, 76, 75, 72, 71, 63, 61, 59, 59, 53, 52, 50, 47, 45, 42, 40, 35, 35, 31, 28, 23, 22, 17, 17, 12, 7},
                {100, 99, 98, 97, 93, 92, 90, 90, 85, 82, 82, 78, 76, 74, 72, 68, 63, 60, 59, 55, 53, 51, 49, 47, 44, 42, 37, 35, 32, 30, 27, 22, 20, 17, 14, 11, 6},
                {100, 99, 98, 96, 93, 92, 90, 86, 84, 81, 80, 77, 75, 72, 70, 67, 62, 59, 58, 55, 52, 50, 49, 47, 43, 42, 36, 34, 31, 29, 26, 22, 19, 16, 13, 10, 5},
                {100, 99, 97, 96, 93, 92, 90, 85, 83, 80, 79, 77, 75, 72, 70, 66, 61, 59, 57, 54, 52, 49, 49, 46, 42, 39, 36, 34, 31, 29, 26, 21, 18, 14, 12, 9, 4},
                {100, 99, 97, 95, 93, 91, 87, 85, 83, 79, 78, 77, 75, 72, 69, 65, 61, 58, 57, 54, 52, 49, 48, 45, 40, 39, 36, 34, 29, 28, 25, 19, 18, 14, 12, 9, 4},
                {100, 99, 97, 95, 93, 91, 86, 84, 83, 79, 78, 76, 73, 71, 68, 65, 60, 58, 56, 53, 50, 49, 48, 44, 39, 38, 35, 33, 29, 27, 23, 19, 18, 14, 12, 8, 4},
                {100, 99, 96, 94, 92, 91, 86, 84, 81, 78, 77, 75, 73, 71, 68, 64, 60, 57, 54, 53, 50, 48, 48, 44, 39, 37, 34, 32, 28, 26, 22, 19, 17, 13, 11, 7, 4},
                {100, 99, 96, 94, 92, 90, 86, 84, 80, 78, 77, 75, 71, 70, 67, 61, 60, 57, 54, 53, 50, 48, 45, 44, 39, 37, 33, 30, 27, 26, 20, 18, 15, 13, 11, 6, 3},
                {100, 99, 96, 94, 91, 90, 85, 84, 80, 77, 75, 75, 71, 69, 66, 61, 59, 56, 54, 53, 49, 48, 45, 44, 38, 36, 32, 29, 27, 25, 19, 18, 15, 13, 9, 6, 3},
                {100, 98, 96, 94, 91, 89, 85, 82, 80, 77, 75, 73, 70, 68, 65, 60, 59, 56, 54, 53, 49, 46, 44, 44, 38, 36, 32, 28, 27, 25, 19, 17, 15, 13, 9, 6, 3},
                {100, 98, 96, 93, 90, 89, 85, 82, 79, 76, 75, 73, 70, 68, 65, 60, 58, 55, 53, 51, 49, 46, 44, 43, 38, 36, 30, 28, 26, 24, 19, 16, 14, 12, 9, 5, 3},
                {100, 98, 96, 93, 89, 89, 85, 81, 79, 76, 75, 72, 70, 67, 63, 60, 58, 55, 53, 50, 49, 46, 43, 40, 37, 35, 30, 28, 26, 24, 19, 16, 14, 11, 9, 5, 3},
                {100, 98, 96, 93, 89, 88, 85, 81, 79, 76, 74, 72, 70, 66, 63, 59, 57, 54, 53, 49, 48, 45, 41, 40, 37, 35, 30, 28, 25, 22, 18, 15, 13, 11, 8, 5, 2},
                {100, 98, 95, 93, 89, 88, 85, 81, 78, 76, 74, 72, 70, 65, 62, 58, 57, 54, 51, 49, 48, 45, 41, 40, 36, 34, 30, 27, 25, 22, 18, 15, 13, 11, 8, 4, 2},
                {100, 98, 95, 92, 89, 87, 85, 81, 78, 76, 74, 70, 68, 65, 62, 58, 57, 54, 51, 48, 48, 43, 41, 39, 36, 33, 29, 27, 25, 21, 18, 14, 13, 10, 7, 4, 2},
                {99, 98, 95, 92, 89, 87, 85, 80, 78, 75, 74, 70, 67, 65, 61, 58, 57, 54, 50, 48, 48, 42, 41, 38, 36, 33, 28, 26, 24, 21, 17, 14, 12, 10, 7, 4, 2},
                {99, 98, 95, 91, 88, 87, 84, 80, 78, 75, 72, 69, 66, 62, 61, 58, 56, 53, 49, 48, 47, 42, 40, 38, 36, 32, 27, 26, 24, 21, 17, 14, 12, 9, 7, 4, 2},
                {99, 98, 95, 91, 88, 87, 84, 80, 78, 75, 72, 68, 65, 62, 61, 57, 56, 53, 49, 48, 45, 42, 40, 37, 35, 32, 27, 25, 24, 21, 17, 14, 12, 9, 6, 4, 2},
                {99, 98, 94, 91, 88, 86, 83, 80, 78, 75, 71, 67, 65, 62, 60, 57, 56, 51, 48, 48, 45, 42, 40, 37, 35, 32, 27, 25, 23, 21, 16, 13, 12, 9, 6, 4, 2},
                {99, 97, 94, 91, 87, 86, 83, 80, 78, 74, 69, 67, 65, 62, 60, 57, 55, 51, 48, 47, 45, 41, 40, 36, 34, 30, 27, 24, 22, 20, 16, 13, 11, 9, 6, 4, 2},
                {99, 97, 94, 91, 87, 86, 82, 79, 78, 74, 69, 67, 64, 61, 60, 56, 54, 51, 48, 47, 45, 41, 39, 36, 34, 30, 27, 24, 22, 19, 16, 13, 11, 8, 6, 4, 1},
                {99, 97, 94, 91, 87, 85, 82, 79, 77, 73, 69, 67, 64, 61, 59, 56, 53, 50, 48, 45, 44, 41, 39, 36, 32, 30, 25, 24, 21, 19, 16, 13, 11, 7, 6, 3, 1},
                {99, 97, 94, 91, 87, 84, 82, 79, 77, 73, 68, 67, 63, 60, 59, 56, 53, 50, 48, 45, 43, 40, 38, 35, 32, 30, 25, 23, 21, 19, 15, 12, 10, 7, 5, 3, 1},
                {99, 97, 94, 90, 85, 83, 82, 79, 76, 72, 68, 66, 63, 60, 59, 55, 52, 50, 47, 45, 43, 40, 37, 33, 31, 30, 25, 23, 20, 18, 14, 12, 10, 7, 5, 3, 1},
                {99, 97, 93, 89, 85, 83, 81, 78, 76, 71, 68, 64, 63, 60, 59, 55, 52, 49, 46, 45, 43, 40, 37, 33, 30, 28, 24, 23, 20, 17, 14, 12, 9, 7, 5, 3, 1},
                {99, 96, 93, 89, 85, 83, 81, 78, 75, 71, 68, 64, 63, 59, 58, 53, 51, 48, 46, 44, 42, 38, 37, 33, 30, 27, 24, 23, 19, 16, 13, 12, 9, 7, 5, 3, 1},
                {99, 96, 93, 89, 84, 83, 81, 77, 74, 71, 67, 64, 63, 59, 57, 53, 51, 48, 46, 44, 42, 38, 36, 32, 30, 27, 23, 22, 18, 16, 13, 11, 9, 7, 5, 3, 1},
                {99, 96, 92, 89, 84, 83, 81, 77, 74, 70, 67, 63, 61, 59, 56, 53, 50, 48, 45, 43, 41, 37, 36, 32, 29, 27, 23, 22, 17, 16, 13, 10, 9, 6, 4, 2, 1},
                {98, 96, 92, 89, 84, 82, 80, 77, 74, 69, 67, 63, 61, 59, 56, 52, 49, 47, 45, 43, 41, 36, 35, 30, 29, 27, 23, 19, 17, 16, 12, 10, 8, 6, 4, 2, 1},
                {98, 96, 91, 89, 84, 81, 80, 77, 73, 69, 67, 63, 61, 57, 55, 51, 49, 46, 45, 42, 40, 36, 35, 30, 29, 27, 23, 19, 17, 15, 12, 10, 8, 5, 4, 2, 1},
                {98, 95, 91, 88, 84, 81, 79, 76, 73, 69, 66, 62, 60, 57, 54, 51, 48, 46, 45, 42, 39, 35, 34, 30, 29, 25, 23, 18, 16, 15, 12, 10, 8, 5, 4, 2, 0},
                {98, 95, 91, 87, 84, 81, 79, 76, 73, 68, 65, 62, 59, 56, 53, 51, 48, 46, 45, 42, 39, 35, 33, 30, 28, 24, 21, 18, 16, 14, 11, 10, 8, 5, 4, 2, 0},
                {97, 95, 90, 86, 83, 79, 78, 75, 71, 68, 65, 62, 59, 55, 52, 50, 48, 46, 44, 41, 39, 34, 31, 30, 28, 24, 20, 18, 16, 13, 10, 9, 7, 5, 4, 1, 0},
                {97, 94, 89, 86, 82, 78, 77, 73, 71, 68, 65, 61, 55, 54, 52, 50, 47, 45, 43, 41, 39, 34, 30, 29, 27, 23, 20, 18, 16, 13, 10, 9, 7, 5, 4, 1, 0},
                {97, 93, 89, 86, 81, 78, 75, 73, 70, 68, 65, 60, 55, 54, 52, 50, 47, 45, 43, 40, 37, 34, 30, 29, 25, 23, 19, 18, 15, 13, 10, 9, 7, 5, 4, 1, 0},
                {97, 93, 88, 85, 81, 77, 75, 73, 70, 68, 65, 59, 55, 54, 51, 49, 47, 45, 42, 39, 37, 33, 30, 29, 25, 22, 19, 18, 15, 13, 10, 9, 7, 5, 3, 1, 0},
                {96, 93, 88, 85, 79, 77, 74, 72, 69, 66, 63, 59, 55, 53, 50, 49, 46, 43, 41, 39, 35, 32, 30, 26, 25, 21, 19, 17, 14, 12, 9, 8, 7, 5, 3, 1, 0},
                {96, 92, 87, 85, 79, 75, 72, 71, 64, 62, 62, 57, 55, 53, 50, 48, 46, 42, 39, 38, 34, 30, 29, 26, 24, 21, 18, 17, 13, 11, 9, 7, 7, 5, 3, 1, 0},
                {96, 92, 85, 85, 79, 75, 72, 68, 63, 62, 60, 57, 54, 53, 49, 48, 45, 40, 39, 38, 34, 29, 28, 25, 22, 20, 18, 17, 12, 11, 9, 7, 6, 4, 3, 1, 0},
                {95, 91, 85, 82, 78, 75, 72, 64, 62, 61, 59, 56, 54, 53, 49, 48, 42, 40, 39, 37, 33, 28, 27, 24, 21, 19, 18, 14, 12, 11, 9, 5, 5, 4, 2, 1, 0},
                {94, 87, 84, 79, 77, 73, 68, 64, 62, 60, 58, 56, 54, 52, 48, 47, 42, 39, 38, 33, 32, 23, 23, 22, 21, 18, 17, 13, 12, 10, 8, 5, 5, 3, 2, 1, 0},
                {89, 86, 83, 76, 67, 65, 64, 62, 61, 60, 57, 56, 53, 51, 48, 44, 40, 37, 31, 29, 26, 23, 22, 20, 19, 15, 13, 13, 10, 9, 7, 5, 4, 3, 2, 0, 0},
                {87, 82, 72, 71, 63, 60, 60, 60, 55, 54, 54, 53, 52, 50, 46, 44, 34, 31, 29, 29, 24, 23, 21, 20, 18, 14, 13, 12, 9, 8, 6, 5, 4, 2, 1, 0, 0}
            };

            Logger() << matrix;

            int value = 100;
            unsigned int c1 = Algorithm::YoungTableau<>::CountHigherThan(matrix, value);
            unsigned int c2 = Algorithm::YoungTableau<>::CountHigherThan2(matrix, value);
            unsigned int c3 = Algorithm::YoungTableau<>::CountHigherThan3(matrix, value);
            unsigned int c4 = Algorithm::YoungTableau<>::CountHigherThan4(matrix, value);
            Logger() << "(" << c1 << ", " << c2 << ", " << c3 << ", " << c4 << ") elements are higher than " << value << endl;
            ASSERT1(c1 == c2);
            ASSERT1(c1 == c3);
            ASSERT1(c1 == c4);
        }
    });

    Add("YoungTableau.CountHigherThan3", [&]() {
        {
            vector<vector<int>> matrix =
            {
                {100, 99, 97, 97, 92, 90, 80, 79, 74, 68, 65, 63, 61, 51, 49, 41, 41, 22},
                {100, 98, 97, 94, 92, 83, 79, 79, 73, 67, 64, 63, 56, 48, 44, 38, 25, 18},
                {100, 98, 97, 93, 90, 82, 78, 77, 71, 66, 60, 59, 48, 46, 38, 34, 24, 11},
                {100, 98, 95, 93, 87, 81, 78, 72, 71, 66, 59, 51, 45, 44, 34, 31, 22, 9},
                {100, 98, 95, 92, 84, 81, 77, 71, 69, 62, 55, 51, 44, 38, 32, 26, 20, 8},
                {100, 97, 94, 91, 83, 80, 75, 70, 67, 59, 52, 51, 43, 33, 31, 24, 15, 8},
                {100, 97, 92, 91, 82, 80, 74, 69, 67, 59, 51, 48, 42, 32, 30, 24, 13, 7},
                {99, 97, 92, 87, 82, 78, 73, 69, 65, 57, 51, 45, 40, 32, 30, 24, 13, 6},
                {99, 96, 92, 87, 80, 74, 71, 68, 62, 54, 48, 45, 39, 32, 28, 21, 12, 5},
                {99, 96, 90, 85, 78, 74, 71, 67, 62, 53, 48, 44, 39, 32, 25, 19, 12, 5},
                {99, 95, 89, 84, 77, 73, 70, 65, 61, 53, 47, 44, 38, 32, 25, 19, 11, 4},
                {99, 94, 88, 83, 76, 72, 69, 64, 57, 51, 46, 43, 37, 31, 25, 18, 11, 4},
                {98, 94, 88, 82, 76, 72, 67, 63, 57, 51, 46, 42, 35, 28, 24, 17, 11, 4},
                {98, 94, 87, 80, 76, 71, 65, 61, 52, 49, 45, 41, 33, 28, 23, 17, 10, 4},
                {98, 94, 86, 80, 76, 71, 64, 58, 52, 49, 44, 37, 33, 26, 23, 15, 10, 4},
                {98, 94, 86, 80, 75, 70, 63, 57, 52, 48, 44, 35, 32, 25, 21, 15, 10, 4},
                {98, 93, 85, 79, 74, 67, 63, 56, 52, 47, 42, 35, 31, 24, 21, 14, 9, 3},
                {96, 93, 84, 79, 73, 66, 62, 56, 51, 47, 39, 35, 29, 24, 20, 14, 9, 3},
                {96, 92, 83, 77, 72, 66, 62, 55, 51, 47, 39, 34, 29, 24, 20, 13, 8, 3},
                {96, 90, 83, 77, 72, 66, 61, 53, 50, 46, 39, 34, 29, 24, 20, 12, 8, 3},
                {96, 90, 82, 77, 71, 65, 60, 53, 49, 45, 38, 33, 27, 23, 20, 12, 8, 3},
                {96, 90, 82, 76, 71, 65, 59, 52, 48, 42, 38, 33, 26, 22, 19, 12, 8, 3},
                {95, 90, 82, 76, 70, 65, 59, 52, 47, 41, 38, 33, 25, 22, 19, 11, 8, 2},
                {95, 89, 81, 76, 69, 64, 59, 52, 46, 40, 35, 32, 25, 22, 18, 11, 7, 2},
                {95, 89, 81, 74, 69, 63, 58, 49, 45, 40, 35, 32, 25, 22, 17, 11, 7, 2},
                {95, 89, 80, 74, 69, 63, 58, 49, 44, 40, 34, 31, 24, 21, 17, 10, 7, 1},
                {95, 88, 80, 74, 68, 61, 57, 48, 43, 39, 34, 30, 23, 21, 16, 10, 6, 1},
                {95, 87, 80, 73, 68, 61, 55, 47, 42, 39, 34, 30, 22, 21, 16, 9, 5, 1},
                {94, 86, 79, 73, 67, 61, 55, 47, 41, 38, 32, 28, 22, 21, 16, 9, 4, 1},
                {94, 86, 78, 72, 67, 60, 55, 47, 41, 36, 32, 25, 22, 21, 15, 9, 4, 1},
                {93, 85, 77, 71, 67, 60, 52, 46, 40, 36, 32, 24, 22, 20, 14, 9, 4, 1},
                {92, 83, 77, 71, 67, 60, 52, 45, 39, 36, 31, 23, 19, 19, 14, 8, 3, 1},
                {92, 83, 77, 71, 67, 59, 52, 43, 39, 35, 30, 22, 18, 18, 14, 8, 3, 1},
                {92, 82, 76, 71, 64, 59, 50, 42, 38, 34, 27, 22, 18, 16, 14, 8, 3, 0},
                {92, 82, 76, 71, 64, 53, 49, 42, 38, 33, 26, 21, 16, 15, 13, 7, 3, 0},
                {90, 82, 75, 71, 61, 53, 47, 41, 38, 32, 26, 21, 16, 14, 12, 6, 3, 0},
                {89, 81, 74, 70, 60, 53, 44, 41, 37, 32, 25, 21, 16, 13, 10, 6, 2, 0},
                {87, 81, 72, 69, 60, 52, 44, 41, 34, 28, 24, 20, 15, 13, 10, 5, 2, 0},
                {86, 80, 69, 68, 59, 49, 42, 40, 29, 26, 23, 20, 14, 13, 9, 4, 1, 0},
                {86, 79, 67, 65, 55, 43, 42, 33, 29, 26, 22, 19, 14, 13, 8, 4, 1, 0},
                {84, 76, 65, 51, 45, 42, 39, 33, 28, 26, 22, 17, 13, 12, 5, 4, 1, 0},
                {82, 72, 56, 50, 44, 35, 34, 31, 22, 18, 18, 17, 13, 6, 5, 3, 1, 0}
            };

            Logger() << matrix;

            int value = 80;
            unsigned int c1 = Algorithm::YoungTableau<>::CountHigherThan(matrix, value);
            unsigned int c2 = Algorithm::YoungTableau<>::CountHigherThan2(matrix, value);
            unsigned int c3 = Algorithm::YoungTableau<>::CountHigherThan3(matrix, value);
            unsigned int c4 = Algorithm::YoungTableau<>::CountHigherThan4(matrix, value);
            Logger() << "(" << c1 << ", " << c2 << ", " << c3 << ", " << c4 << ") elements are higher than " << value << endl;
            ASSERT1(c1 == c2);
            ASSERT1(c1 == c3);
            ASSERT1(c1 == c4);
        }
    });
    
    Add("YoungTableau.CountHigherThan4", [&]() {
        {
            vector<vector<int>> matrix =
            {
                {100, 100, 98, 96, 92, 88, 87, 86, 86, 81, 81, 77, 68, 65, 64, 62, 62, 62, 56, 51, 50, 41, 37, 33, 32, 27, 22, 16, 14},
                {100, 100, 97, 95, 91, 86, 83, 83, 80, 77, 76, 70, 65, 65, 62, 62, 57, 55, 53, 49, 44, 37, 35, 32, 28, 21, 18, 15, 9},
                {100,  99, 96, 93, 90, 85, 83, 81, 75, 75, 70, 69, 65, 64, 62, 59, 55, 51, 50, 48, 43, 37, 33, 30, 24, 21, 17, 12, 8},
                {100,  99, 96, 92, 89, 85, 83, 78, 75, 73, 69, 67, 65, 61, 59, 55, 53, 51, 49, 45, 38, 36, 32, 29, 23, 20, 17, 11, 7},
                {100,  99, 96, 92, 89, 84, 83, 78, 75, 73, 69, 66, 63, 60, 58, 55, 52, 49, 46, 42, 38, 36, 31, 27, 22, 20, 13, 9, 7},
                {100,  98, 95, 92, 89, 84, 81, 77, 74, 73, 69, 64, 63, 58, 58, 53, 52, 48, 43, 41, 36, 35, 30, 26, 21, 16, 13, 9, 5},
                {100,  97, 95, 92, 88, 84, 80, 76, 74, 72, 69, 64, 62, 58, 57, 52, 50, 47, 43, 41, 36, 35, 29, 25, 21, 16, 13, 9, 4},
                {100,  97, 94, 91, 87, 83, 79, 76, 74, 72, 67, 64, 61, 57, 56, 50, 47, 44, 43, 40, 34, 32, 28, 24, 20, 16, 13, 8, 4},
                {100,  97, 94, 90, 86, 83, 79, 76, 73, 72, 67, 63, 60, 56, 53, 50, 47, 44, 42, 38, 34, 31, 27, 24, 19, 14, 12, 8, 3},
                { 99,  96, 94, 89, 86, 83, 79, 75, 73, 72, 66, 62, 59, 55, 51, 49, 45, 44, 42, 37, 33, 30, 25, 23, 18, 14, 12, 8, 3},
                { 99,  96, 93, 88, 85, 83, 79, 75, 72, 71, 66, 62, 58, 54, 51, 47, 45, 43, 39, 36, 32, 29, 25, 23, 17, 14, 11, 7, 2},
                { 99,  96, 93, 88, 85, 83, 78, 75, 72, 70, 65, 61, 58, 54, 51, 47, 44, 39, 39, 35, 32, 28, 25, 23, 16, 14, 11, 6, 2},
                { 99,  96, 93, 88, 85, 81, 78, 74, 71, 70, 65, 61, 56, 53, 50, 47, 44, 39, 37, 34, 31, 27, 25, 22, 16, 13, 10, 6, 2},
                { 99,  96, 92, 88, 85, 81, 78, 74, 71, 68, 64, 60, 55, 53, 50, 47, 43, 38, 36, 33, 30, 26, 24, 21, 15, 12, 9, 6, 2},
                { 99,  96, 92, 88, 84, 81, 78, 74, 71, 68, 63, 60, 55, 52, 50, 47, 42, 37, 36, 33, 29, 26, 22, 20, 14, 12, 9, 6, 2},
                { 98,  95, 91, 87, 84, 80, 77, 74, 70, 68, 63, 59, 55, 52, 49, 46, 42, 37, 36, 33, 28, 26, 22, 19, 14, 12, 8, 5, 2},
                { 98,  95, 91, 87, 84, 80, 77, 73, 70, 67, 63, 59, 54, 51, 49, 44, 42, 37, 35, 32, 28, 25, 22, 18, 14, 11, 8, 4, 2},
                { 98,  94, 91, 87, 84, 80, 76, 73, 70, 66, 62, 58, 54, 51, 48, 44, 39, 37, 35, 31, 28, 25, 21, 18, 14, 10, 7, 4, 2},
                { 97,  93, 90, 87, 84, 79, 76, 71, 70, 65, 62, 58, 53, 51, 46, 43, 38, 36, 33, 31, 26, 24, 21, 18, 13, 10, 7, 4, 2},
                { 97,  93, 90, 86, 83, 79, 76, 70, 69, 65, 62, 58, 53, 50, 46, 41, 38, 35, 33, 30, 26, 24, 21, 17, 13, 9, 7, 3, 2},
                { 97,  93, 88, 86, 83, 78, 75, 70, 69, 65, 61, 56, 53, 50, 45, 41, 37, 35, 33, 30, 26, 23, 20, 16, 12, 9, 7, 3, 2},
                { 96,  93, 87, 85, 82, 77, 75, 70, 65, 64, 61, 56, 53, 49, 45, 39, 37, 34, 31, 28, 26, 22, 20, 16, 12, 8, 7, 3, 2},
                { 96,  92, 87, 85, 82, 76, 75, 68, 65, 64, 61, 55, 53, 49, 44, 38, 36, 33, 31, 27, 25, 22, 18, 15, 12, 8, 6, 3, 2},
                { 96,  92, 86, 85, 81, 76, 71, 66, 65, 63, 60, 54, 52, 48, 43, 38, 34, 32, 30, 27, 24, 19, 17, 15, 11, 8, 4, 3, 1},
                { 95,  91, 85, 82, 79, 75, 71, 65, 63, 61, 60, 54, 52, 48, 43, 37, 34, 30, 29, 26, 23, 16, 16, 14, 11, 7, 4, 2, 1},
                { 95,  90, 84, 81, 78, 75, 70, 64, 61, 61, 57, 53, 50, 43, 42, 37, 33, 30, 29, 24, 23, 15, 15, 13, 9, 7, 4, 2, 0},
                { 94,  86, 83, 80, 76, 73, 68, 64, 61, 58, 56, 53, 48, 43, 40, 36, 31, 29, 27, 24, 17, 15, 15, 12, 9, 7, 4, 2, 0},
                { 93,  85, 82, 79, 72, 72, 65, 61, 58, 57, 54, 50, 47, 40, 37, 35, 30, 28, 27, 21, 17, 14, 13, 12, 8, 6, 3, 2, 0},
                { 85,  83, 78, 77, 70, 70, 64, 61, 53, 50, 49, 45, 44, 40, 28, 24, 24, 21, 18, 17, 17, 13, 12, 8, 8, 2, 2, 1, 0}
            };

            Logger() << matrix;

            int value = 81;
            unsigned int c1 = Algorithm::YoungTableau<>::CountHigherThan(matrix, value);
            unsigned int c2 = Algorithm::YoungTableau<>::CountHigherThan2(matrix, value);
            unsigned int c3 = Algorithm::YoungTableau<>::CountHigherThan3(matrix, value);
            unsigned int c4 = Algorithm::YoungTableau<>::CountHigherThan4(matrix, value);
            Logger() << "(" << c1 << ", " << c2 << ", " << c3 << ", " << c4 << ") elements are higher than " << value << endl;
            ASSERT1(c1 == c2);
            ASSERT1(c1 == c3);
            ASSERT1(c1 == c4);
        }
    });

    Add("YoungTableau.CountHigherThan5", [&]() {
        {
            for (int i = 0; i < 100; i++)
            {
                size_t m = Util::RandomInt(50, 1);
                size_t n = Util::RandomInt(50, 1);
                vector<vector<int>> matrix = Util::RandomMatrix(m, n, 100);
                Algorithm::YoungTableau<>::Create2(matrix);
                Logger() << matrix;
                Algorithm::YoungTableau<>::Verify(matrix);
                for (size_t j = 0; j < m; j++)
                {
                    for (size_t k = 0; k < matrix[j].size(); k++)
                    {
                        unsigned long c1 = Algorithm::YoungTableau<>::CountHigherThan(matrix, matrix[j][k]);
                        unsigned long c2 = Algorithm::YoungTableau<>::CountHigherThan2(matrix, matrix[j][k]);
                        unsigned long c3 = Algorithm::YoungTableau<>::CountHigherThan3(matrix, matrix[j][k]);
                        unsigned long c4 = Algorithm::YoungTableau<>::CountHigherThan4(matrix, matrix[j][k]);
                        Logger() << "Run (" << j << ", " << k << "): (" << c1 << ", " << c2 << ", " << c3 << ", " << c4 << ") elements are higher than " << matrix[j][k] << endl;
                        ASSERT1(c1 == c2);
                        ASSERT1(c1 == c3);
                        ASSERT1(c1 == c4);
                    }
                }
            }
        }
        {
            for (int i = 0; i < 100; i++)
            {
                size_t m = Util::RandomInt(50, 1);
                size_t n = Util::RandomInt(50, 1);
                vector<vector<int>> matrix = Util::RandomMatrix(m, n, 100);
                Algorithm::YoungTableau<greater<>>::Create2(matrix);
                Logger() << matrix;
                Algorithm::YoungTableau<greater<>>::Verify(matrix);
                for (size_t j = 0; j < m; j++)
                {
                    for (size_t k = 0; k < matrix[j].size(); k++)
                    {
                        unsigned long c1 = Algorithm::YoungTableau<greater<>>::CountHigherThan(matrix, matrix[j][k]);
                        unsigned long c2 = Algorithm::YoungTableau<greater<>>::CountHigherThan2(matrix, matrix[j][k]);
                        unsigned long c3 = Algorithm::YoungTableau<greater<>>::CountHigherThan3(matrix, matrix[j][k]);
                        unsigned long c4 = Algorithm::YoungTableau<greater<>>::CountHigherThan4(matrix, matrix[j][k]);
                        Logger() << "Run (" << j << ", " << k << "): (" << c1 << ", " << c2 << ", " << c3 << ", " << c4 << ") elements are higher than " << matrix[j][k] << endl;
                        ASSERT1(c1 == c2);
                        ASSERT1(c1 == c3);
                        ASSERT1(c1 == c4);
                    }
                }
            }
        }
    });

    Add("Sort Grid", [&]() {
        auto check = [&](vector<vector<int>>& g) {
            Logger() << "Before sort " << endl << g;
            Util::SortGrid(g);
            Logger() << "After sort " << endl << g;
        };
        {
            vector<vector<int>> g =
            {
                { 3, 2 , 1 },
                { 2, 1 },
                { 3, 1 },
                { 3, 2 },
                { 2 },
                { 1 }
            };
            check(g);
        }
        {
            vector<vector<int>> g =
            {
                { 1, 2 , 3 },
                { 1, 2 },
                { 1, 3 },
                { 2, 3 },
                { 2 },
                { 1 }
            };
            check(g);
        }
    });
}